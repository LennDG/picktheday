[package]
name = "picktheday"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
# --- Web Framework and Server ---
axum = { version = "0.7", features = ["macros"] } # Web framework based on Hyper
axum-htmx = "0.6.0"
leptos = { version = "0.7.0-beta7", features = [
    "nightly",
] } # Frontend framework for building web apps in Rust
leptos_meta = { version = "0.7.0-beta7" } # Meta tags for leptos
leptos_axum = { version = "0.7.0-beta7" } # Leptos integration with Axum

# --- Async and Concurrency ---
tokio = { version = "1", features = [
    "rt-multi-thread",
] } # Async runtime for Rust
tower = { version = "0.4" } # Tower middleware and services
tower-http = { version = "0.5", features = ["fs"] } # HTTP utilities for Tower

# --- Error Handling ---
thiserror = "1" # Simplified error handling

# --- Utilities and Helpers ---
http = "1"                         # HTTP types and utilities
time = "0.3"                       # Time handling in Rust
rand = "0.8"                       # Random number generation
derive_more = { workspace = true } # Derive common traits with less boilerplate
dotenvy = { workspace = true }

# --- Tracing and Logging ---
tracing = { version = "0.1" }              # tracing for structured logging
tracing-subscriber = { version = "0.3.0" } # tracing subscriber for filtering/logging

# --- Panic Hook ---
console_error_panic_hook = "0.1" # Hook for better error reporting in WebAssembly

# --- Serialization and JSON ---
serde = { version = "1", features = ["derive"] } # Serialization framework
serde_json = "1"                                 # JSON serialization/deserialization
serde_with = "3"                                 # Enhanced functionality for Serde

# --- WebAssembly ---
wasm-bindgen = "=0.2.93" # For communicating between Rust and JavaScript in WASM

# --- Modules ---
entity = { path = "../entity" } # module from local path

[dev-dependencies]
anyhow = "1"

[features]
# hydrate = ["leptos/hydrate"]
# ssr = [
#     "dep:axum",
#     "dep:tokio",
#     "dep:tower",
#     "dep:tower-http",
#     "dep:leptos_axum",
#     "leptos/ssr",
#     "dep:tracing",
#     "dep:tracing-subscriber",
#     "dep:entity",
# ]

# Defines a size-optimized profile for the WASM bundle in release mode
[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true
codegen-units = 1
panic = "abort"

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "picktheday"

# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"

# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"

# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
style-file = "style/output.css"
# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
#. Env: LEPTOS_ASSETS_DIR.
assets-dir = "public"

# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"

# The port to use for automatic reload monitoring
reload-port = 3001

# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"

#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"

# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"

# The features to use when compiling the bin target
#
#. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
#. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
#. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
#. Defaults to false.
lib-default-features = false

# The profile to use for the lib target when compiling for release
#
#. Defaults to "release".
lib-profile-release = "wasm-release"
