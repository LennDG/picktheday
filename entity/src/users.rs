//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0-rc.5

use sea_orm::{entity::prelude::*, IntoActiveModel, Set};

use crate::types::{PublicId, UserName};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub public_id: PublicId,
    pub name: UserName,
    pub plan_id: i32,
    pub ctime: TimeDateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::dates::Entity")]
    Dates,
    #[sea_orm(
        belongs_to = "super::plans::Entity",
        from = "Column::PlanId",
        to = "super::plans::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Plans,
}

impl Related<super::dates::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Dates.def()
    }
}

impl Related<super::plans::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Plans.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

pub struct NewUser {
    name: UserName,
    plan_id: i32,
}

impl NewUser {
    pub fn new(name: UserName, plan_id: i32) -> Self {
        NewUser { name, plan_id }
    }
}

impl IntoActiveModel<ActiveModel> for NewUser {
    fn into_active_model(self) -> ActiveModel {
        ActiveModel {
            name: Set(self.name),
            plan_id: Set(self.plan_id),
            public_id: Set(PublicId::default()),
            ctime: Set(time::OffsetDateTime::now_utc()),
            ..Default::default()
        }
    }
}

// region:	  --- Helper functions
pub mod helpers {

    use super::{Column, Entity, Model};
    use crate::{
        dates,
        db::ModelManager,
        error::{Error, Result},
        plans::{self, helpers::plan_id_by_public_id},
        types::{PublicId, UserName},
        users, ID_MAP_CACHE,
    };
    use sea_orm::{prelude::*, IntoActiveModel};

    pub async fn create_user_for_plan(
        plan_public_id: PublicId,
        username: UserName,
        mm: ModelManager,
    ) -> Result<Model> {
        // -- Get the plan id
        let plan_id = plan_id_by_public_id(plan_public_id, mm.clone()).await?;

        // TODO: Give clear error to user when username already exists
        // -- Insert new user
        let new_user = users::NewUser::new(username, plan_id);
        let new_user_model = new_user.into_active_model().insert(mm.db()).await?;

        Ok(new_user_model)
    }

    pub async fn user_id_by_public_id(public_id: PublicId, mm: ModelManager) -> Result<i32> {
        // First, check if the user is already in the cache
        if let Some(cached_user_id) = ID_MAP_CACHE.get(&public_id) {
            return Ok(cached_user_id.to_owned());
        }

        // If not in the cache, get it from DB and put it into the cache
        let id = user_by_public_id(public_id.clone(), mm.clone()).await?.id;
        ID_MAP_CACHE.insert(public_id, id);

        Ok(id)
    }

    pub async fn user_by_public_id(public_id: PublicId, mm: ModelManager) -> Result<Model> {
        let user = Entity::find()
            .filter(Column::PublicId.eq(public_id.clone()))
            .one(mm.db())
            .await?
            .ok_or(Error::EntityNotFound(public_id.to_string()))?;

        Ok(user)
    }

    pub async fn get_users_with_date_for_plan_public_id(
        plan_public_id: PublicId,
        mm: ModelManager,
    ) -> Result<Vec<(Model, Vec<dates::Model>)>> {
        let id = plans::helpers::plan_id_by_public_id(plan_public_id, mm.clone()).await?;

        let users_with_dates = Entity::find()
            .filter(Column::PlanId.eq(id))
            .find_with_related(dates::Entity)
            .all(mm.clone().db())
            .await?;

        Ok(users_with_dates)
    }
}
// endregion: --- Helper functions
