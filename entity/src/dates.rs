//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0-rc.5

use sea_orm::{entity::prelude::*, IntoActiveModel, Set};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "dates")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub user_id: i32,
    pub date: TimeDate,
    pub ctime: TimeDateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UserId",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Users,
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

pub struct NewDate {
    date: time::Date,
    user_id: i32,
}

impl NewDate {
    pub fn new(date: time::Date, user_id: i32) -> Self {
        NewDate { date, user_id }
    }
}

impl IntoActiveModel<ActiveModel> for NewDate {
    fn into_active_model(self) -> ActiveModel {
        ActiveModel {
            date: Set(self.date),
            user_id: Set(self.user_id),
            ctime: Set(time::OffsetDateTime::now_utc()),
            ..Default::default()
        }
    }
}

// region:	  --- Helpers
pub mod helpers {
    use super::{Column, Entity};
    use crate::{db::ModelManager, error::Result, types::PublicId, users};

    use sea_orm::{ColumnTrait, EntityTrait, QueryFilter};

    pub async fn delete_date_for_user(
        user_public_id: PublicId,
        date: time::Date,
        mm: ModelManager,
    ) -> Result<()> {
        // TODO: Make this a single query instead of 2

        let user = users::helpers::user_by_public_id(user_public_id, mm.clone()).await?;

        Entity::delete_many()
            .filter(Column::UserId.eq(user.id))
            .filter(Column::Date.eq(date))
            .exec(mm.db())
            .await?;

        Ok(())
    }
}

// endregion: --- Helpers
